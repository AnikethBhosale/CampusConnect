{"ast":null,"code":"const express = require(\"express\");\nconst collection = require(\"./mongo\");\nconst cors = require(\"cors\");\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n}));\napp.use(cors());\napp.get(\"/\", cors(), (req, res) => {});\napp.post(\"/\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const check = await collection.findOne({\n      email: email\n    });\n    if (check) {\n      res.json(\"exist\");\n    } else {\n      res.json(\"notexist\");\n    }\n  } catch (e) {\n    res.json(\"fail\");\n  }\n});\napp.post(\"/signup\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  const data = {\n    email: email,\n    password: password\n  };\n  try {\n    const check = await collection.findOne({\n      email: email\n    });\n    if (check) {\n      res.json(\"exist\");\n    } else {\n      res.json(\"notexist\");\n      await collection.insertMany([data]);\n    }\n  } catch (e) {\n    res.json(\"fail\");\n  }\n});\napp.listen(8000, () => {\n  console.log(\"port connected\");\n});","map":{"version":3,"names":["express","require","collection","cors","app","use","json","urlencoded","extended","get","req","res","post","email","password","body","check","findOne","e","data","insertMany","listen","console","log"],"sources":["D:/study/CampusConnect-main/src/App.js"],"sourcesContent":["const express = require(\"express\")\nconst collection = require(\"./mongo\")\nconst cors = require(\"cors\")\nconst app = express()\napp.use(express.json())\napp.use(express.urlencoded({ extended: true }))\napp.use(cors())\n\n\n\napp.get(\"/\",cors(),(req,res)=>{\n\n})\n\n\napp.post(\"/\",async(req,res)=>{\n    const{email,password}=req.body\n\n    try{\n        const check=await collection.findOne({email:email})\n\n        if(check){\n            res.json(\"exist\")\n        }\n        else{\n            res.json(\"notexist\")\n        }\n\n    }\n    catch(e){\n        res.json(\"fail\")\n    }\n\n})\n\n\n\napp.post(\"/signup\",async(req,res)=>{\n    const{email,password}=req.body\n\n    const data={\n        email:email,\n        password:password\n    }\n\n    try{\n        const check=await collection.findOne({email:email})\n\n        if(check){\n            res.json(\"exist\")\n        }\n        else{\n            res.json(\"notexist\")\n            await collection.insertMany([data])\n        }\n\n    }\n    catch(e){\n        res.json(\"fail\")\n    }\n\n})\n\napp.listen(8000,()=>{\n    console.log(\"port connected\");\n})\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,SAAS,CAAC;AACrC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrBI,GAAG,CAACC,GAAG,CAACL,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACL,OAAO,CAACO,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAC/CJ,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;AAIfC,GAAG,CAACK,GAAG,CAAC,GAAG,EAACN,IAAI,CAAC,CAAC,EAAC,CAACO,GAAG,EAACC,GAAG,KAAG,CAE9B,CAAC,CAAC;AAGFP,GAAG,CAACQ,IAAI,CAAC,GAAG,EAAC,OAAMF,GAAG,EAACC,GAAG,KAAG;EACzB,MAAK;IAACE,KAAK;IAACC;EAAQ,CAAC,GAACJ,GAAG,CAACK,IAAI;EAE9B,IAAG;IACC,MAAMC,KAAK,GAAC,MAAMd,UAAU,CAACe,OAAO,CAAC;MAACJ,KAAK,EAACA;IAAK,CAAC,CAAC;IAEnD,IAAGG,KAAK,EAAC;MACLL,GAAG,CAACL,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC,MACG;MACAK,GAAG,CAACL,IAAI,CAAC,UAAU,CAAC;IACxB;EAEJ,CAAC,CACD,OAAMY,CAAC,EAAC;IACJP,GAAG,CAACL,IAAI,CAAC,MAAM,CAAC;EACpB;AAEJ,CAAC,CAAC;AAIFF,GAAG,CAACQ,IAAI,CAAC,SAAS,EAAC,OAAMF,GAAG,EAACC,GAAG,KAAG;EAC/B,MAAK;IAACE,KAAK;IAACC;EAAQ,CAAC,GAACJ,GAAG,CAACK,IAAI;EAE9B,MAAMI,IAAI,GAAC;IACPN,KAAK,EAACA,KAAK;IACXC,QAAQ,EAACA;EACb,CAAC;EAED,IAAG;IACC,MAAME,KAAK,GAAC,MAAMd,UAAU,CAACe,OAAO,CAAC;MAACJ,KAAK,EAACA;IAAK,CAAC,CAAC;IAEnD,IAAGG,KAAK,EAAC;MACLL,GAAG,CAACL,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC,MACG;MACAK,GAAG,CAACL,IAAI,CAAC,UAAU,CAAC;MACpB,MAAMJ,UAAU,CAACkB,UAAU,CAAC,CAACD,IAAI,CAAC,CAAC;IACvC;EAEJ,CAAC,CACD,OAAMD,CAAC,EAAC;IACJP,GAAG,CAACL,IAAI,CAAC,MAAM,CAAC;EACpB;AAEJ,CAAC,CAAC;AAEFF,GAAG,CAACiB,MAAM,CAAC,IAAI,EAAC,MAAI;EAChBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;AACjC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}